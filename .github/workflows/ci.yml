name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand({ ping: 1 })' | mongo localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --entrypoint sh
          -c "mongod --replSet rs0 --bind_ip_all"

    env:
      DATABASE_URL: mongodb://localhost:27017/pickme?replicaSet=rs0
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install frontend dependencies
        working-directory: frontend
        run: bun install

      - name: Build frontend
        working-directory: frontend
        run: bun run build

      - name: Install backend dependencies
        working-directory: backend
        run: bun install

      # Wait for Mongo & init replica set BEFORE Prisma commands
      - name: Wait for MongoDB
        run: |
          until nc -z localhost 27017; do
            echo "Waiting for MongoDB..."
            sleep 2
          done

      - name: Initialize replica set
        run: |
          mongo --eval "rs.initiate({_id: 'rs0', members: [{ _id: 0, host: 'localhost:27017' }]})"
          echo "Replica set initialized"

      - name: Generate Prisma client
        working-directory: backend
        run: bunx prisma generate

      - name: Run Prisma migrations
        working-directory: backend
        run: bunx prisma db push

      - name: Build backend
        working-directory: backend
        run: bun run build

      - name: Run backend tests
        working-directory: backend
        run: bunx jest --config jest.config.ts
