// ======================================================
//  Datasource & Generator
// ======================================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ======================================================
//  Enums
// ======================================================
enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

enum BlockType {
  text
  image
  video
  link
  pdf
}

enum MediaType {
  image
  video
  pdf
  other
}

enum ShareStatus {
  ACTIVE
  REVOKED
}

enum ShareChannel {
  LINK
  QR
  EMAIL
}

/* ---------------- Core Chain ---------------- */

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  username        String   @unique
  firstName       String
  lastName        String
  email           String   @unique
  password        String
  profilePicture  String?
  isAdmin         Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  profile   Profile?
  media     Media[]  @relation("UserMedia")      // ไฟล์ที่ user อัปโหลด
}

model Profile {
  id          String     @id @default(cuid()) @map("_id")
  userId      String     @unique
  displayName String
  description String?
  location    String?
  emailPublic String?
  url         String?
  visibility  Visibility  @default(PUBLIC)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id])
  sections    Section[]
  shareLinks  ShareLink[]
  media       Media[]    @relation("ProfileToMedia")
}

model Section {
  id            String    @id @default(cuid()) @map("_id")
  profileId     String
  title         String
  description   String?
  coverMediaId  String?   // FK ไป Media ถ้ามีภาพปก
  orderIndex    Int?      // ลำดับในหน้าโปรไฟล์
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile       Profile   @relation(fields: [profileId], references: [id])
  coverMedia    Media?    @relation("SectionCoverMedia", fields: [coverMediaId], references: [id])
  items         Item[]

  @@index([profileId])
}

model Item {
  id                 String    @id @default(cuid()) @map("_id")
  sectionId          String
  title              String
  description        String?
  thumbnailMediaId   String?
  orderIndex         Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  section            Section   @relation(fields: [sectionId], references: [id])
  thumbnailMedia     Media?    @relation("ItemThumbMedia", fields: [thumbnailMediaId], references: [id])

  blocks             ItemBlock[]
  tags               ItemTag[]
  stat               ItemStat?
  views              ViewEvent[]
  shares             ShareEvent[]

  @@index([sectionId])
}

model ItemBlock {
  id         String    @id @default(cuid()) @map("_id")
  itemId     String
  type       BlockType
  mediaId    String?   // ถ้าเป็น image/video/pdf block
  content    Json      // payload + style/alt/caption/… (ตาม type)
  orderIndex Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  item       Item      @relation(fields: [itemId], references: [id])
  media      Media?    @relation("BlockMedia", fields: [mediaId], references: [id])

  @@index([itemId])
  @@index([mediaId])
}

/* ---------------- Media Library ---------------- */

model Media {
  id         String     @id @default(cuid()) @map("_id")
  ownerId    String?    // ใครอัปโหลด (อาจว่าง ถ้าเป็นระบบ)
  profileId  String?    // ผูกกับโปรไฟล์ไหน (optional)
  fileName   String
  url        String     @unique
  type       MediaType
  mimeType   String?
  size       Int?
  width      Int?
  height     Int?
  usedCount  Int        @default(0) // นับการอ้างอิงจาก blocks/items/sections
  uploadedAt DateTime   @default(now())

  profile    Profile?   @relation("ProfileToMedia", fields: [profileId], references: [id])
  user       User?      @relation("UserMedia", fields: [ownerId], references: [id])

  // Back-relations
  sectionCover Section[]  @relation("SectionCoverMedia")
  itemThumb     Item[]    @relation("ItemThumbMedia")
  blockUsedIn   ItemBlock[] @relation("BlockMedia")

  @@index([ownerId])
  @@index([profileId])
}

/* ---------------- Tags ---------------- */

model Tag {
  id        String    @id @default(cuid()) @map("_id")
  name      String    @unique
  createdAt DateTime  @default(now())

  items     ItemTag[]
}

model ItemTag {
  id     String @id @default(cuid()) @map("_id")
  itemId String
  tagId  String

  item   Item @relation(fields: [itemId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@unique([itemId, tagId])
  @@index([tagId])
}

/* ---------------- Share / QR ---------------- */

model ShareLink {
  id         String      @id @default(cuid()) @map("_id")
  profileId  String
  slug       String      @unique  // ใช้เป็น path ของลิงก์
  status     ShareStatus @default(ACTIVE)
  createdAt  DateTime    @default(now())
  revokedAt  DateTime?

  profile    Profile     @relation(fields: [profileId], references: [id])

  @@index([profileId])
}

/* ---------------- Stats / Events ---------------- */

model ItemStat {
  itemId     String   @id @map("_id")
  viewCount  Int      @default(0)
  likeCount  Int      @default(0) // ถ้ายังไม่มีปุ่ม like จริง อาจไม่ใช้

  item       Item     @relation(fields: [itemId], references: [id])
}

model ViewEvent {
  id         String    @id @default(cuid()) @map("_id")
  itemId     String
  userId     String?   // ถ้า viewer ล็อกอิน
  ipHash     String?   // เก็บแบบแฮชเพื่อ privacy
  userAgent  String?
  createdAt  DateTime  @default(now())

  item       Item      @relation(fields: [itemId], references: [id])

  @@index([itemId, createdAt])
}

model ShareEvent {
  id         String       @id @default(cuid()) @map("_id")
  itemId     String
  channel    ShareChannel
  createdAt  DateTime     @default(now())

  item       Item         @relation(fields: [itemId], references: [id])

  @@index([itemId, createdAt])
}

